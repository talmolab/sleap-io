# Continuous integration
name: CI

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

jobs:
  # Check which files changed to determine if we need to run tests
  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'sleap_io/**'
              - 'tests/**'
              - '.github/workflows/ci.yml'
              - 'pyproject.toml'

  # Lint with ruff
  lint:
    needs: changes
    if: needs.changes.outputs.code == 'true' || github.event_name == 'workflow_dispatch'
    # This job runs:
    #
    # 1. Linting and formatting checks with ruff
    #
    # Note: This uses Google-style docstring convention
    # Ref: https://google.github.io/styleguide/pyguide.html
    name: Lint
    runs-on: "ubuntu-latest"
    steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup UV
      uses: astral-sh/setup-uv@v6
      with:
        python-version: "3.13"

    - name: Install dependencies
      run: |
        uv sync --all-extras

    - name: Run ruff checks
      run: |
        uv run ruff check sleap_io tests
    
    - name: Run ruff format check
      run: |
        uv run ruff format --check sleap_io tests

  # Tests with pytest
  tests:
    needs: changes
    if: needs.changes.outputs.code == 'true' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python: ["3.8", "3.13"]
        exclude:
          - os: "macos-latest"
            python: "3.8"
          - os: "windows-latest"
            python: "3.8"

    name: Tests (${{ matrix.os }}, Python ${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup UV
        uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Print environment info
        run: |
          uv run python --version
          uv pip list
          uv run python -c "import imageio_ffmpeg as iiof; print(f'FFMPEG: {iiof.get_ffmpeg_exe()} ({iiof.get_ffmpeg_version()})')"

      - name: Install graphics dependencies on Ubuntu
        # https://github.com/conda-forge/opencv-feedstock/issues/401
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get update && sudo apt-get install libglapi-mesa libegl-mesa0 libegl1 libopengl0 libgl1 libglx-mesa0

      - name: Test with pytest (with coverage)
        run: |
          uv run pytest --cov=sleap_io --cov-report=xml --durations=-1 tests/

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Agentic coverage summary (PRs only)
        if: github.event_name == 'pull_request'
        run: |
          uv run python scripts/cov_summary.py --source coverage.xml --only-pr-diff-lines --format md > coverage_summary.md
          echo "### Coverage summary (misses & partials)" >> $GITHUB_STEP_SUMMARY
          cat coverage_summary.md >> $GITHUB_STEP_SUMMARY
