# Continuous integration
name: CI

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - "sleap_io/**"
      - "tests/**"
      - ".github/workflows/ci.yml"
      - "environment.yml"
  push:
    branches:
      - main
    paths:
      - "sleap_io/**"
      - "tests/**"
      - ".github/workflows/ci.yml"
      - "environment.yml"

jobs:
  # Lint with black and docstring check with pydocstyle
  lint:
    # This job runs:
    #
    # 1. Linting with black
    #
    # 2. Docstring style checking with pydocstyle 
    # Note: This uses Google-style docstring convention
    # Ref: https://google.github.io/styleguide/pyguide.html
    name: Lint
    runs-on: "ubuntu-latest"
    steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install dependencies
      run: |
        pip install --editable .[dev]

    - name: Run Black
      run: |
        black --check sleap_io tests
    
    - name: Run pydocstyle
      run: |
        pydocstyle --convention=google sleap_io/

  # Tests with pytest
  tests:
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-14"]
        python: ["3.8", "3.12"]
        exclude:
          - os: "macos-14"
            python: "3.8"

    name: Tests (${{ matrix.os }}, Python ${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Cache conda
        uses: actions/cache@v3
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        with:
          enableCrossOsArchive: true # Use faster GNU tar
          path: ${{ runner.os == 'Windows' && 'D:\\conda_pkgs_dir' || '~/conda_pkgs_dir' }}  # faster on Windows
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('environment.yml', 'pyproject.toml') }}

      - name: Setup Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
          conda-solver: "libmamba"
          environment-file: environment.yml
          activate-environment: sleap-io
          python-version: ${{ matrix.python }}
          use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
          pkgs-dirs: ${{ runner.os == 'Windows' && 'D:\\conda_pkgs_dir' || '~/conda_pkgs_dir' }}  # faster on Windows

      - name: Print environment info
        shell: bash -l {0}
        run: |
          which python
          conda info
          conda list
          pip freeze

      - name: Install graphics dependencies on Ubuntu
        # https://github.com/conda-forge/opencv-feedstock/issues/401
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        shell: bash -l {0}
        run: |
          sudo apt-get update && sudo apt-get install libglapi-mesa libegl-mesa0 libegl1 libopengl0 libgl1 libglx-mesa0

      - name: Test with pytest (with coverage)
        shell: bash -l {0}
        run: |
          pytest --cov=sleap_io --cov-report=xml --durations=-1 tests/

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}
